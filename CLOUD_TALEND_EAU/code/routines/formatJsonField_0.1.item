package routines;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class formatJsonField {

    /**
     * helloExample: not return value, only print "hello" + message.
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} string("world") input: The string need to be printed.
     * 
     * {example} helloExemple("world") # hello world !.
     */
    public static String formatJSON(String mongoString) {
    	
    	if(mongoString == null || mongoString.length() == 0) {
    		return mongoString;  		
    	} else {
    	
    	String jsonstring=mongoString.replace("[Document{{", "").replace("}}]", "");
    	
    	String[] listStrings = jsonstring.split(",");
    	String stringToReturn="{";
    	
    	for (int i=0;i<listStrings.length;i++) {
    		String[] item = listStrings[i].split("=");
    		String key="\""+item[0].trim()+"\"";
    		String value="";
    		if (item.length == 1) {
    			// pas de valeur associÃ©e
    			value="";
    		} else {
    			if ("null".equals(item[1]) || isNumeric(item[1])==true) {
    				value=item[1];
    			} else {
    				value="\""+item[1]+"\"";
    			}
    		}
    		stringToReturn=stringToReturn+","+key+":"+value;
    		}
    	stringToReturn=stringToReturn.replace("{,", "{")+"}";
        return stringToReturn;
    	} 
    }
    
    public static boolean isNumeric(String strNum) {
        if (strNum == null) {
            return false;
        }
        try {
            double d = Double.parseDouble(strNum);
        } catch (NumberFormatException nfe) {
            return false;
        }
        return true;
    }
    
}
