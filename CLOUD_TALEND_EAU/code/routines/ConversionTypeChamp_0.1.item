package routines;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.Date;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class ConversionTypeChamp {

    /**
     * verifierType: permet de vérifier que le format est en entrée est compatible (return true ou false).
     * 
     * 
     * {talendTypes} Boolean
     * 
     * {Category} User Defined
     * 
     * {param} string("254") input: La valeur à tester.
     * 
     * 
     * {param} string("INTEGER") input: Le type à tester.
     *
     * {example} ConversionTypeChamp.verifierType("254","INTEGER") # true.
     */
    public static boolean verifierType(String valeur, String format) {
    	
    	if(valeur == null || valeur.equals("")) return true;
    	
    	String[] formats = format.split("@");
    	String format1 = formats[0];
    	String format2="";
    	if (format.contains("@")) { format2 = formats[1]; }
    	
    	
    	if (format1.equals("INTEGER")){
        	
    		try 
    		{ 
    			Integer.parseInt(valeur); 
    	    } catch(Exception e) { 
    	        return false; 
    	    } 
    	    return true;
    	}
    	
    	else if (format1.equals("BIGDECIMAL")){
        	
    		try 
    		{ 
    			BigDecimal bigDecimalValue= new BigDecimal(valeur); 
    	    } catch(Exception e) { 
    	        return false; 
    	    }
    	    return true;
    	}
    	
    	else if (format1.equals("VARCHAR")){
    		
    		return valeur.length() <= Integer.parseInt(format2)?  true :  false;

    	}
    	
    	else if (format1.equals("DATE")){
        	
    		SimpleDateFormat formatter = new SimpleDateFormat(format2);
    		
    		try 
    		{ 
    			Date date = formatter.parse(valeur);
    	    } catch(Exception e) { 
    	        return false; 
    	    }
    	    return true;

    	}
    	
    	
    	else return false;
    	
    	
    }
    
    
    
    
    
    /**
     * removeEndSpaces: retourne le string en paramètre, sans les espaces finaux
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} string("word   ") input: le string à normaliser
     * 
     * {example} removeEndSpaces("word   ") # word.
     */
    public static String removeEndSpaces(String str_string) {
    	//On retourne le string sans les espaces finaux via une Regex (au moins un espace final, \s couvrant les espaces, tabulations et retours chariots)
    	return str_string.replaceAll("\\s+$", "");
    }
    
}
