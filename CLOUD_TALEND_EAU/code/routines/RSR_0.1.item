package routines;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.math.BigDecimal;

//import com.sun.java.util.jar.pack.Package.File;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class RSR {

    /**
     * BDzeroToNull : Transforme les zéros en valeurs nulles
     * 
     * 
     * {talendTypes} BigDecimal
     * 
     * {Category} User Defined
     * 
     * {param} BigDecimal(input) input: The BigDecimal to test.
     * 
     * {example} BDzeroToNull(0) # null !.
     * {example} BDzeroToNull(1.1) # 1.1 !.
     */
    public static BigDecimal BDzeroToNull(BigDecimal input) {
        if (input == null || (input.compareTo(BigDecimal.ZERO) == 0)) {
            return null; 
        }
        else
        	return input;
    }
    
    /**
     * BDnullToZero : Transforme les valeurs nulles en zéro
     * 
     * 
     * {talendTypes} BigDecimal
     * 
     * {Category} User Defined
     * 
     * {param} BigDecimal(input) input: The BigDecimal to test.
     * 
     * {example} BDnullToZero(null) # 0 !.
     * {example} BDnullToZero(1.1) # 1.1 !.
     */
    public static BigDecimal BDnullToZero(BigDecimal input) {
        if (input == null) {
            return BigDecimal.ZERO;
        }
        else
        	return input;
    }
    
    /**
     * ChangeHierCode : Change les codes hierarchies dans un fichier
     * @throws IOException 
     * {param} String(input) file: Fichier à modifier.
     * {param} String(input) sep: séparateur du fichier.
     * {param} String(input) chaine : Chaine de caractères à insérer dans le fichier.
     * {param} String(input) pos : Position de la colonne à modifier dans le fichier.
     * 
     */
    public static Integer ChangeHierCode(String file, String sep, String chaine, Integer pos) throws IOException {
    	BufferedReader fileReader = null;
    	File filein=new File(file);
    	Integer posi=pos-1;
    	String[] tabLigne;
    	String newLigne;
    	String newSep="\\"+sep;
    	File fileout = new File(file+"_new");
    	File fileold = new File(file+"_old");
    	FileWriter fileWriter = new FileWriter(fileout,false);
    	if (fileold.exists()) {
    		fileold.delete();
    	}
    	try
        {
    		fileReader = new BufferedReader(new FileReader(file));
        }
    	catch(FileNotFoundException exc)
        {
    	   System.out.println("Fichier non existant :"+file);
    	   fileout.delete();
     	   fileWriter.close();
     	   return 1;
        }

    	   for (String ligne = fileReader.readLine(); ligne != null; ligne = fileReader.readLine())
           {
    		   tabLigne=ligne.split(newSep);
    		   if (tabLigne.length < posi ) {
    			   System.out.println("Colonne "+posi+" non existante dans le fichier "+file);
    			   System.out.println("Aucune action effectuée sur le fichier "+file);
    			   fileout.delete();
    			   fileReader.close();
    	    	   fileWriter.close();
    			   return 1;
    		   }
    		   tabLigne[posi]=chaine;
 
    		   newLigne=String.join(sep, tabLigne);
    		   fileWriter.write(newLigne+"\r\n");
      	
           }
    	   fileReader.close();
    	   fileWriter.close();
    	  // filein.delete();
    	   filein.renameTo(fileold);
    	   fileout.renameTo(filein);
       return 0;
    }
    
    
}
